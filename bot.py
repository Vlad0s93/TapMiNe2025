import json
from aiogram import Bot, Dispatcher, types, F
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, WebAppInfo
from aiogram.filters import Command
from aiogram.utils.keyboard import InlineKeyboardBuilder
import asyncio

TOKEN = "8451357175:AAEpPLysIpO4m2LmPNRvyxs7_jRAYsfiBhU"
bot = Bot(token=TOKEN)
dp = Dispatcher(bot)

ACCOUNTS_FILE = "accounts.json"

# –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è/–∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –∞–∫–∞—É–Ω—Ç—ñ–≤
def load_accounts():
    try:
        with open(ACCOUNTS_FILE, "r") as f:
            return json.load(f)
    except:
        return {}

def save_accounts(accounts):
    with open(ACCOUNTS_FILE, "w") as f:
        json.dump(accounts, f)

accounts = load_accounts()

def ensure_account(user_id):
    if str(user_id) not in accounts:
        accounts[str(user_id)] = {"balance": 0.0}
        save_accounts(accounts)
    return accounts[str(user_id)]

# –°—Ç–∞—Ä—Ç
@dp.message(Command("start"))
async def start(message: types.Message):
    ensure_account(message.from_user.id)
    kb = InlineKeyboardBuilder()
    kb.button(text="üéÆ –ì—Ä–∞—Ç–∏ (—Ç–∞–ø–∞–ª–∫–∏)", web_app=WebAppInfo(url="https://YOUR_DOMAIN/tap_game.html"))
    await message.answer("–ü—Ä–∏–≤—ñ—Ç! –ù–∞—Ç–∏—Å–Ω–∏ –∫–Ω–æ–ø–∫—É, —â–æ–± –∑–∞—Ä–æ–±–∏—Ç–∏ –º–æ–Ω–µ—Ç–∏.", reply_markup=kb.as_markup())

# –û–±—Ä–æ–±–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É –≥—Ä–∏
@dp.message(F.content_type == "web_app_data")
async def game_result(message: types.Message):
    data = json.loads(message.web_app_data.data)
    acc = ensure_account(message.from_user.id)

    if "taps" in data:
        taps = data["taps"]
        earned = round(taps * 1.5, 2)
        acc["balance"] += earned
        save_accounts(accounts)
        await message.answer(f"üéâ –ì—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –¢–∏ –∑–∞—Ä–æ–±–∏–≤ {earned} –º–æ–Ω–µ—Ç.\n–ë–∞–ª–∞–Ω—Å: {acc['balance']:.2f}")

    if "withdraw" in data:
        await message.answer(f"üí∞ –í–∏–≤—ñ–¥ –º–æ–Ω–µ—Ç –∑–∞–ø–∏—Ç–∞–Ω–æ! –ü–æ—Ç–æ—á–Ω–∏–π –±–∞–ª–∞–Ω—Å: {acc['balance']:.2f}\n–ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä –æ–±—Ä–æ–±–∏—Ç—å –≤–∏–≤—ñ–¥ –≤—Ä—É—á–Ω—É.")

# –ë–∞–ª–∞–Ω—Å
@dp.message(Command("balance"))
async def balance(message: types.Message):
    acc = ensure_account(message.from_user.id)
    await message.answer(f"üí∞ –¢–≤—ñ–π –±–∞–ª–∞–Ω—Å: {acc['balance']:.2f} –º–æ–Ω–µ—Ç")

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == "__main__":
    import logging
    logging.basicConfig(level=logging.INFO)

    asyncio.run(dp.start_polling(bot))
